/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {
    BaseMaterial: THREE.MeshStandardMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials } = useGLTF('/cube.glb') as unknown as GLTFResult

  useFrame(
    ({ clock }) =>
      group.current && (group.current.rotation.y = clock.getElapsedTime() / 3)
  )
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials.BaseMaterial}
        rotation={[0, 0, 0]}
        scale={[1.5, 1.5, 1.5]}
      />
    </group>
  )
}

useGLTF.preload('/cube.glb')
